{"alert":{"ui.yt.alert":"angular.module('ui.yt.alert', [])\n  .factory('$alert', ['$document', '$rootScope', '$compile', '$q', function($document, $rootScope, $compile, $q) {\n    var mask = angular.element('<div class=\"modal-backdrop fade in\" />');\n    mask.css({\n      'z-index': 1035\n    });\n    var alertCount = 0;\n    var defaultOptions = {\n      title: 'Alert',\n      okText: 'OK'\n    };\n    //ccx\n    var alertDialog;\n    var scope;\n    var defer;\n    var pop = function(options) {\n      if (alertCount === 0) {\n        defer = $q.defer();\n        scope = $rootScope.$new();\n        angular.extend(scope, defaultOptions, options);\n        var wrapper = angular.element('<alert-wrapper />');\n        alertDialog = $compile(wrapper)(scope);\n        $document.find('body').append(alertDialog);\n        $document.find('body').append(mask);\n\n        scope.close = dismiss;\n        scope.ok = dismiss;\n        alertCount++;\n        return defer.promise;\n      }\n    };\n    var dismiss = function() {\n      if (alertCount === 1) {\n        alertDialog.remove();\n        mask.remove();\n        scope.$destroy();\n        defer.resolve('ok');\n        alertCount--;\n      }\n    };\n    return {\n      pop: pop\n    };\n  }])\n  .directive('alertWrapper', function() {\n    return {\n      restrict: 'E',\n      replace: true,\n      templateUrl: 'alert/template/wrapper.html'\n    };\n  });","alert/template/wrapper.html":"(function(module) {\ntry { module = angular.module(\"alert/template/wrapper.html\"); }\ncatch(err) { module = angular.module(\"alert/template/wrapper.html\", []); }\nmodule.run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"alert/template/wrapper.html\",\n    \"<div class=\\\"modal fade in\\\" style=\\\"display: block\\\">\\n\" +\n    \"  <div class=\\\"modal-dialog\\\">\\n\" +\n    \"    <div class=\\\"modal-content\\\">\\n\" +\n    \"      <div class=\\\"modal-header\\\">\\n\" +\n    \"        <button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"close()\\\"><span aria-hidden=\\\"true\\\">&times;</span><span class=\\\"sr-only\\\">Close</span></button>\\n\" +\n    \"        <h4 class=\\\"modal-title\\\">{{title}}</h4>\\n\" +\n    \"      </div>\\n\" +\n    \"      <div class=\\\"modal-body\\\">\\n\" +\n    \"        {{body}}\\n\" +\n    \"      </div>\\n\" +\n    \"      <div class=\\\"modal-footer\\\">\\n\" +\n    \"        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"ok()\\\">{{okText}}</button>\\n\" +\n    \"      </div>\\n\" +\n    \"    </div>\\n\" +\n    \"  </div>\\n\" +\n    \"</div>\");\n}]);\n})();\n"},"busySpin":{"ui.yt.busySpin":"angular.module('ui.yt.busySpin', [])\n  .factory('$busySpin', ['$compile', '$rootScope', '$document', '$log', function($compile, $rootScope, $document, $log) {\n    var launchSpin = function() {\n      if (!$spin) {\n        generateDom();\n      } else {\n        $log.warn('should not generate spin, if spining');\n      }\n    };\n    var scope = $rootScope.$new();\n    var $spin;\n    var generateDom = function() {\n      var spin = angular.element('<div class=\"busy-spin\" busy-spin-three-bounce />');\n      $spin = $compile(spin)(scope);\n      $document.find('body').append($spin);\n    };\n    var dismiss = function() {\n      $spin.remove();\n    };\n    return {\n      start: launchSpin,\n      dismiss: dismiss\n    };\n  }])\n  .directive('busySpinThreeBounce', function() {\n    return {\n      restrict: 'A',\n      template: '<div class=\"three-bounce\">' +\n        '<div class=\"bounce1\"></div>' +\n        '<div class=\"bounce2\"></div>' +\n        '<div class=\"bounce3\"></div>' +\n        '</div>'\n    };\n  });"},"checklist":{"ui.yt.checklist":"//shamelessly plagiarize from http://vitalets.github.io/checklist-model/\nangular.module('ui.yt.checklist', [])\n  .directive('checklist', ['$parse', '$compile', function($parse, $compile) {\n      // contains\n      function contains(arr, item) {\n        if (angular.isArray(arr)) {\n          for (var i = 0; i < arr.length; i++) {\n            if (angular.equals(arr[i], item)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n\n      // add\n      function add(arr, item) {\n        arr = angular.isArray(arr) ? arr : [];\n        for (var i = 0; i < arr.length; i++) {\n          if (angular.equals(arr[i], item)) {\n            return arr;\n          }\n        }\n        arr.push(item);\n        return arr;\n      }\n\n      // remove\n      function remove(arr, item) {\n        if (angular.isArray(arr)) {\n          for (var i = 0; i < arr.length; i++) {\n            if (angular.equals(arr[i], item)) {\n              arr.splice(i, 1);\n              break;\n            }\n          }\n        }\n        return arr;\n      }\n\n      // http://stackoverflow.com/a/19228302/1458162\n      function postLinkFn(scope, elem, attrs) {\n        // compile with `ng-model` pointing to `checked`\n        $compile(elem)(scope);\n\n        // getter / setter for original model\n        var getter = $parse(attrs.checklist);\n        var setter = getter.assign;\n\n        // value added to list\n        var value = $parse(attrs.checklistValue)(scope.$parent);\n\n        // watch UI checked change\n        scope.$watch('checked', function(newValue, oldValue) {\n          if (newValue === oldValue) {\n            return;\n          }\n          var current = getter(scope.$parent);\n          if (newValue === true) {\n            setter(scope.$parent, add(current, value));\n          } else {\n            setter(scope.$parent, remove(current, value));\n          }\n        });\n\n        // watch original model change\n        scope.$parent.$watch(attrs.checklist, function(newArr, oldArr) {\n          scope.checked = contains(newArr, value);\n        }, true);\n      }\n\n      return {\n        restrict: 'A',\n        priority: 1000,\n        terminal: true,\n        scope: true,\n        compile: function(tElement, tAttrs) {\n          if (tElement[0].tagName !== 'INPUT' || tElement.attr('type') !== 'checkbox') {\n            throw 'checklist-model should be applied to `input[type=\"checkbox\"]`.';\n          }\n\n          if (!tAttrs.checklistValue) {\n            throw 'You should provide `checklist-value`.';\n          }\n\n          // exclude recursion\n          tElement.removeAttr('checklist');\n\n          // local scope var storing individual checkbox model\n          tElement.attr('ng-model', 'checked');\n\n          return postLinkFn;\n        }\n      };\n    }]);"},"confirm":{"ui.yt.confirm":"angular.module('ui.yt.confirm', [])\n  .factory('$confirm', ['$compile', '$rootScope', '$q', '$document', function ($compile, $rootScope, $q, $document) {\n    var mask = angular.element('<div class=\"modal-backdrop fade in\" />');\n    mask.css({\n      'z-index': 1000\n    });\n    var confirmCount = 0;\n    var defaultOptions = {\n      title: 'Confirm',\n      okText: 'OK',\n      cancelText: 'Cancel'\n    };\n    var confirmDialog;\n    var scope;\n    var defer;\n    var pop = function(options) {\n      if (confirmCount === 0) {\n        defer = $q.defer();\n        scope = $rootScope.$new();\n        angular.extend(scope, defaultOptions, options);\n        var wrapper = angular.element('<confirm-wrapper />');\n        confirmDialog = $compile(wrapper)(scope);\n        $document.find('body').append(confirmDialog);\n        $document.find('body').append(mask);\n\n        scope.close = dismiss;\n        scope.cancel = dismiss;\n        scope.ok = okDismiss;\n        confirmCount++;\n        return defer.promise;\n      }\n    };\n    var dismiss = function() {\n      if (confirmCount === 1) {\n        close('cancel');\n      }\n    };\n    var okDismiss = function () {\n      if (confirmCount === 1) {\n        close('ok');\n      }\n    };\n    var close = function (resolveType) {\n      confirmDialog.remove();\n      mask.remove();\n      scope.$destroy();\n      defer.resolve(resolveType);\n      confirmCount--;\n    };\n    return {\n      pop: pop\n    };\n  }])\n  .directive('confirmWrapper', function() {\n    return {\n      restrict: 'E',\n      replace: true,\n      templateUrl: 'confirm/template/wrapper.html'\n    };\n  });","confirm/template/wrapper.html":"(function(module) {\ntry { module = angular.module(\"confirm/template/wrapper.html\"); }\ncatch(err) { module = angular.module(\"confirm/template/wrapper.html\", []); }\nmodule.run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"confirm/template/wrapper.html\",\n    \"<div class=\\\"modal fade in\\\" style=\\\"display: block\\\">\\n\" +\n    \"  <div class=\\\"modal-dialog\\\">\\n\" +\n    \"    <div class=\\\"modal-content\\\">\\n\" +\n    \"      <div class=\\\"modal-header\\\">\\n\" +\n    \"        <button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"close()\\\"><span aria-hidden=\\\"true\\\">&times;</span><span class=\\\"sr-only\\\">Close</span></button>\\n\" +\n    \"        <h4 class=\\\"modal-title\\\">{{title}}</h4>\\n\" +\n    \"      </div>\\n\" +\n    \"      <div class=\\\"modal-body\\\">\\n\" +\n    \"        {{body}}\\n\" +\n    \"      </div>\\n\" +\n    \"      <div class=\\\"modal-footer\\\">\\n\" +\n    \"        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"ok()\\\">{{okText}}</button>\\n\" +\n    \"        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"cancel()\\\">{{cancelText}}</button>\\n\" +\n    \"      </div>\\n\" +\n    \"    </div>\\n\" +\n    \"  </div>\\n\" +\n    \"</div>\");\n}]);\n})();\n"},"dropdownlist":{"ui.yt.dropdownlist":"angular.module('ui.yt.dropdownlist', [])\n  .directive('dropdownlist', ['$compile', '$document', '$parse', '$timeout', function($compile, $document, $parse, $timeout) {\n    \n    var compile = function compile( tElement, tAttributes, transclude ) {\n      return function (scope, element, attrs, ctrl ) {\n        if (!attrs.dropdownlist) {\n          element.remove();\n          return false;\n        }\n        // console.log(element[0].innerHTML);\n        // .match(/^\\s*(.+)\\s+in\\s+(.*?)\\s*(\\s+track\\s+by\\s+(.+)\\s*)?$/);\n        // var NG_OPTIONS_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/,\n        var DROPDOWN_OPTIONS_REGEXP = /^\\s*([\\S]+)(?:\\s+as\\s+([\\S]+))?\\s+in\\s+([\\S]+)\\s*$/;\n        var match = attrs.dropdownlist.match(DROPDOWN_OPTIONS_REGEXP);\n        var repeatArray = match[3];\n        var repeatItem = match[2] ? match[2] : match[1];\n        var asString = match[2] ? match[1] : '';\n        \n        transclude(scope, function (clone) {\n          var transcludeContent;\n          if (clone && clone[0]) {\n            transcludeContent = clone[0].innerHTML.trim();//http://stackoverflow.com/questions/22183778/angularjs-transclude-how-to-access-the-html-content-of-clone-object\n          } else {\n            transcludeContent = '{{' + repeatItem + '}}';\n          }\n\n          var tpl = '<li ng-repeat=\"' + repeatItem + ' in ' + repeatArray + '\">' + \n                      '<a ng-click=\"itemClick(' + repeatItem + ', $event)\">' + transcludeContent + '</a>' +\n                    '</li>';\n          var lisEle = angular.element(tpl);\n          lis = $compile(lisEle)(scope);\n          element.find('ul').append(lis);\n        });\n        var model = $parse(attrs.ngModel);\n        //watch model change, update cur text\n        scope.$parent.$watch(attrs.ngModel, function (newValue, oldValue) {\n          if (newValue === oldValue) {\n            return;\n          }\n          if (newValue) {\n            var index = getItemIndex(newValue, $parse(repeatArray)(scope.$parent), asString);\n            if (index !== -1) {\n              // trick to delay dom query\n              $timeout(function () {\n                var aForIndex = element.find('li').eq(index).find('a')[0];\n                scope.curText = aForIndex.textContent || aForIndex.innerText;\n              });\n              // finally change to get value from dom\n              // if (!asString) {\n              //   scope.curText = $parse(repeatArray)(scope.$parent)[index];\n              // } else {\n              //   scope.curText = getPathValue($parse(repeatArray)(scope.$parent)[index], asString);\n              // }\n            } else {\n              scope.curText = '';\n            }\n          }\n\n        });\n        var getItemIndex = function (value, array, keyPath) {\n          if (!value || !array || !array.length) {\n            return -1;\n          }\n          for (var i = 0; i < array.length; i++) {\n            if ((keyPath && getPathValue(array[i], keyPath) === value) || (!keyPath && array[i] === value)) {\n              return i;\n            }\n          }\n          return -1;\n        };\n        // return value under path, e.g. value={key: '1'}, path='item.key', should return '1', maximum depth: 2\n        var getPathValue = function (value, path) {\n          // dump(value, path)\n          if (!value || !path) {\n            return;\n          }\n          var paths = path.split('.');\n          if (!paths[1]) {\n            return;\n          }\n          if (paths[2]) {\n            return value[paths[1]][paths[2]];\n          }\n          return value[paths[1]];\n        };\n        scope.itemClick = function(item, $event) {\n          if (!attrs.ngModel) {\n            return false;\n          }\n          if (!asString) {\n            model.assign(scope.$parent, item);\n          } else {\n            var value = $parse(asString)(angular.element($event.target).scope());\n            model.assign(scope.$parent, value);\n          }\n          if (attrs.ngChange) {\n            scope.$parent.$eval(attrs.ngChange);\n          }\n          //http://stackoverflow.com/questions/18326689/javascript-textcontent-is-not-working-in-ie8-or-ie7\n          // scope.curText = $event.target.textContent || $event.target.innerText;\n        };\n        element.find('button').on('click', function(e) {\n          element.toggleClass('open');\n\n          e.preventDefault();\n          e.stopPropagation();\n        });\n\n        $document.on('click', function() {\n          element.removeClass('open');\n        });\n      };\n    };\n    return {\n      scope: true,\n      replace: true,\n      transclude: true,\n      terminal: true,\n      priority: 1000,\n      templateUrl: 'dropdownlist/template/dropdown.html',\n      compile: compile\n     //  ,\n     //  controller: function($scope, $element, $transclude, $log){\n     //    if (!this.transcludeContent) {\n     //      $transclude(function(clone) {\n     //        this.transcludeContent = clone[0].innerHTML;\n     //         // console.log(clone[0].innerHTML); //undefined??\n     //         // console.log(clone[0].outerHTML); //undefined??\n     //         // console.log(angular.element(\"<div/>\").append(clone).html()); //undefined??\n     //         // console.log(clone.text()); //works but strips the html tags    \n     //      });\n     //    }\n     // }\n    };\n  }]);","dropdownlist/template/dropdown.html":"(function(module) {\ntry { module = angular.module(\"dropdownlist/template/dropdown.html\"); }\ncatch(err) { module = angular.module(\"dropdownlist/template/dropdown.html\", []); }\nmodule.run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"dropdownlist/template/dropdown.html\",\n    \"\\n\" +\n    \"\\n\" +\n    \"<div class=\\\"dropdown btn-group w_100p\\\">\\n\" +\n    \"  <button class=\\\"dropdown-toggle btn btn-default btn-full-width\\\" ng-disabled=\\\"dropdownDisabled\\\">\\n\" +\n    \"    <span class=\\\"col-md-11 dropdown-text\\\">{{curText}}</span>\\n\" +\n    \"    <span class=\\\"caret\\\"></span>\\n\" +\n    \"  </button>\\n\" +\n    \"  <ul class=\\\"dropdown-menu\\\">\\n\" +\n    \"  </ul>\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n})();\n"},"focusOnce":{"ui.yt.focusOnce":"angular.module('ui.yt.focusOnce', [])\n  .directive('focusOnce', [\n    '$timeout',\n    '$parse',\n    function($timeout, $parse) {\n      return {\n        restrict: 'A',\n        link: function(scope, element, attrs) {\n          var model = $parse(attrs.focusOnce);\n          var unwatch = scope.$watch(model, function(value) {\n            if (value === true) {\n              $timeout(function() {\n                element[0].focus();\n                unwatch();\n              });\n            }\n          });\n        }\n      };\n    }\n  ]);"},"msie":{"ui.yt.msie":"angular.module('ui.yt.msie', [])\n  .constant('MSIE', (function() {\n    var msie = ~~((/msie (\\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1]);\n    if (isNaN(msie)) {\n      msie = ~~((/trident\\/.*; rv:(\\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1]);\n    }\n    return msie;\n  })());"},"placeholder":{"ui.yt.placeholder":"angular.module('ui.yt.placeholder', [])\n  .directive('placeholder', function() {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs, ctrl) {\n        // var placeHolderText = attrs.placeholder;\n        // var msie = ~~( navigator.userAgent.toLowerCase().match( /msie (\\d)/ ) || [] )[ 1 ];\n        var isInputSupported = 'placeholder' in document.createElement('input');\n        var isTextareaSupported = 'placeholder' in document.createElement('textarea');\n        /*for ie below 9,placeholder attribute not supported*/\n        if (!isInputSupported || !isTextareaSupported) {\n          var value;\n\n          var placehold = function() {\n            element.val(attrs.placeholder);\n            element.addClass('placeholder-ie');\n          };\n          var unplacehold = function() {\n            element.val('');\n            element.removeClass('placeholder-ie');\n          };\n\n          scope.$watch(attrs.ngModel, function(val) {\n            value = val || '';\n          });\n\n          element.bind('focus', function() {\n            if (value === '') {\n              unplacehold();\n            }\n          });\n\n          element.bind('blur', function() {\n            if (element.val() === '') {\n              placehold();\n            }\n          });\n\n          ctrl.$formatters.unshift(function(val) {\n            if (!val) {\n              placehold();\n              value = '';\n              return attrs.placeholder;\n            }\n            return val;\n          });\n        }\n      }\n    };\n  });"},"popoverConfirm":{"ui.yt.popoverConfirm":"angular.module('ui.yt.popoverConfirm', ['ui.yt.position'])\n  .directive('popoverConfirm', ['$compile', '$document', '$timeout', '$position', '$parse', function($compile, $document, $timeout, $position, $parse) {\n    return {\n      scope: {\n        options: '=popoverConfirm',\n        confirm: '&',\n        cancel: '&'\n      },\n      link: function(scope, element, attrs) {\n\n        var $popoverScope = scope.$new();\n        $popoverScope.isOpened = false; // isOpened maintains status\n        $popoverScope.position = {\n          top: 0,\n          left: 0\n        };\n        var defaultOptions = {\n          confirmText: 'Confirm',\n          cancelText: 'Cancel',\n          confirmBtnClass: 'btn-primary'\n        };\n        var ifDocumentClickedBind = false;\n        var ifElementClickBind = false;\n        var $popover;\n\n        var generatePopoverDom = function() {\n          var popoverElement = angular.element('<popover-confirm-wrapper />');\n          $popover = $compile(popoverElement)($popoverScope);\n          $document.find('body').append($popover);\n        };\n\n        var updateContent = function() {\n          angular.extend($popoverScope, defaultOptions, scope.options);\n        };\n\n        //TODO adjust position, when different `placement`\n        var updatePosition = function() {\n          $popoverScope.position = $position.offset(element);\n          $popoverScope.position.top = $popoverScope.position.top - $popover.prop('offsetHeight');\n          $popoverScope.position.left = $popoverScope.position.left - ($popover.prop('offsetWidth') - $position.position(element).width) / 2;\n        };\n\n        //when document clicked\n        var documentClicked = function(event) {\n          if ($popoverScope.isOpened && event.target !== element[0]) {\n            $popoverScope.isOpened = false;\n            element.removeAttr('disabled');\n            if (!$popoverScope.$$phase) {\n              $popoverScope.$apply();\n            }\n            element.removeAttr('disabled');\n          }\n        };\n\n        //when clicked\n        var elementClicked = function(e) {\n          if (!$popover) {\n            generatePopoverDom();\n          }\n          e.preventDefault();\n          $popoverScope.$apply(function() {\n            $popoverScope.isOpened = true;\n          });\n        };\n\n        $popoverScope.$watch('isOpened', function(value) {\n          if (value) {\n            updateContent();\n            $timeout(function() {\n              updatePosition();\n            });\n            $document.bind('click', documentClicked);\n            if (ifElementClickBind) {\n              element.unbind('click', elementClicked);\n            }\n            ifDocumentClickedBind = true;\n          } else {\n            if (ifDocumentClickedBind) {\n              $document.unbind('click', documentClicked);\n            }\n            element.bind('click', elementClicked);\n            ifElementClickBind = true;\n          }\n        });\n\n        /*confirm and cancel handler*/\n        //TODO retrieve a promise from outer `confirm`\n        $popoverScope.confirm = function () {\n          // $timeout(function () {\n            $popoverScope.isOpened = false;\n            scope.confirm();\n            element.removeAttr(\"disabled\");\n          // });\n        };\n        $popoverScope.cancel = function () {\n          $popoverScope.isOpened = false;\n          scope.cancel();\n          element.removeAttr(\"disabled\");\n        };\n\n        /* destroy pop when ele destroyed*/\n        scope.$on('$destroy', function() {\n          $popover.remove();\n          $popoverScope.$destroy();\n        });\n      }\n    };\n  }])\n  .directive('popoverConfirmWrapper', function() {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: 'popoverConfirm/template/wrapper.html',\n      link: function(scope, element, attrs) {\n        element.bind('click', function(event) {\n          event.preventDefault();\n          event.stopPropagation();\n        });\n      }\n    };\n  });","popoverConfirm/template/wrapper.html":"(function(module) {\ntry { module = angular.module(\"popoverConfirm/template/wrapper.html\"); }\ncatch(err) { module = angular.module(\"popoverConfirm/template/wrapper.html\", []); }\nmodule.run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"popoverConfirm/template/wrapper.html\",\n    \"<div class=\\\"popover top\\\" ng-style=\\\"{display: (isOpened && 'block') || 'none', top: position.top+'px', left: position.left+'px', zIndex: 3000}\\\">\\n\" +\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +\n    \"  <div class=\\\"popover-inner\\\">\\n\" +\n    \"    <h3 class=\\\"popover-title\\\" ng-if=\\\"title\\\">{{title}}</h3>\\n\" +\n    \"    <div class=\\\"popover-content\\\">\\n\" +\n    \"      <div ng-bind-html=\\\"msg\\\"></div>\\n\" +\n    \"      <div class=\\\"popover-footer clearfix\\\">\\n\" +\n    \"        <div class=\\\"align-center\\\">\\n\" +\n    \"          <button class=\\\"btn {{confirmBtnClass}}\\\" ng-click=\\\"confirm()\\\">{{confirmText}}</button>\\n\" +\n    \"          <button class=\\\"btn btn-default\\\" ng-click=\\\"cancel()\\\">{{cancelText}}</button>\\n\" +\n    \"        </div>\\n\" +\n    \"      </div>\\n\" +\n    \"    </div>\\n\" +\n    \"  </div>\\n\" +\n    \"</div>\");\n}]);\n})();\n"},"position":{"ui.yt.position":"/*shamelessly pliagarize from ui-bootstrap*/\nangular.module('ui.yt.position', [])\n\n/**\n * A set of utility methods that can be use to retrieve position of DOM elements.\n * It is meant to be used where we need to absolute-position DOM elements in\n * relation to other, existing elements (this is the case for tooltips, popovers,\n * typeahead suggestions etc.).\n */\n  .factory('$position', ['$document', '$window', function ($document, $window) {\n\n    function getStyle(el, cssprop) {\n      if (el.currentStyle) { //IE\n        return el.currentStyle[cssprop];\n      } else if ($window.getComputedStyle) {\n        return $window.getComputedStyle(el)[cssprop];\n      }\n      // finally try and get inline style\n      return el.style[cssprop];\n    }\n\n    /**\n     * Checks if a given element is statically positioned\n     * @param element - raw DOM element\n     */\n    function isStaticPositioned(element) {\n      return (getStyle(element, 'position') || 'static' ) === 'static';\n    }\n\n    /**\n     * returns the closest, non-statically positioned parentOffset of a given element\n     * @param element\n     */\n    var parentOffsetEl = function (element) {\n      var docDomEl = $document[0];\n      var offsetParent = element.offsetParent || docDomEl;\n      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docDomEl;\n    };\n\n    return {\n      /**\n       * Provides read-only equivalent of jQuery's position function:\n       * http://api.jquery.com/position/\n       */\n      position: function (element) {\n        var elBCR = this.offset(element);\n        var offsetParentBCR = { top: 0, left: 0 };\n        var offsetParentEl = parentOffsetEl(element[0]);\n        if (offsetParentEl !== $document[0]) {\n          offsetParentBCR = this.offset(angular.element(offsetParentEl));\n          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;\n          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;\n        }\n\n        var boundingClientRect = element[0].getBoundingClientRect();\n        return {\n          width: boundingClientRect.width || element.prop('offsetWidth'),\n          height: boundingClientRect.height || element.prop('offsetHeight'),\n          top: elBCR.top - offsetParentBCR.top,\n          left: elBCR.left - offsetParentBCR.left\n        };\n      },\n\n      /**\n       * Provides read-only equivalent of jQuery's offset function:\n       * http://api.jquery.com/offset/\n       */\n      offset: function (element) {\n        var boundingClientRect = element[0].getBoundingClientRect();\n        return {\n          width: boundingClientRect.width || element.prop('offsetWidth'),\n          height: boundingClientRect.height || element.prop('offsetHeight'),\n          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),\n          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)\n        };\n      },\n\n      /**\n       * Provides coordinates for the targetEl in relation to hostEl\n       */\n      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {\n\n        var positionStrParts = positionStr.split('-');\n        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';\n\n        var hostElPos,\n          targetElWidth,\n          targetElHeight,\n          targetElPos;\n\n        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);\n\n        targetElWidth = targetEl.prop('offsetWidth');\n        targetElHeight = targetEl.prop('offsetHeight');\n\n        var shiftWidth = {\n          center: function () {\n            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;\n          },\n          left: function () {\n            return hostElPos.left;\n          },\n          right: function () {\n            return hostElPos.left + hostElPos.width;\n          }\n        };\n\n        var shiftHeight = {\n          center: function () {\n            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;\n          },\n          top: function () {\n            return hostElPos.top;\n          },\n          bottom: function () {\n            return hostElPos.top + hostElPos.height;\n          }\n        };\n\n        switch (pos0) {\n          case 'right':\n            targetElPos = {\n              top: shiftHeight[pos1](),\n              left: shiftWidth[pos0]()\n            };\n            break;\n          case 'left':\n            targetElPos = {\n              top: shiftHeight[pos1](),\n              left: hostElPos.left - targetElWidth\n            };\n            break;\n          case 'bottom':\n            targetElPos = {\n              top: shiftHeight[pos0](),\n              left: shiftWidth[pos1]()\n            };\n            break;\n          default:\n            targetElPos = {\n              top: hostElPos.top - targetElHeight,\n              left: shiftWidth[pos1]()\n            };\n            break;\n        }\n\n        return targetElPos;\n      }\n    };\n  }]);\n"},"toaster":{"ui.yt.toaster":"angular.module('ui.yt.toaster', [])\n  .factory('$toaster', ['$compile', '$document', '$rootScope', '$timeout', function ($compile, $document, $rootScope, $timeout) {\n    var id = 0;\n    var scope = $rootScope.$new();\n    scope.toasters = [];\n    var $container;\n    var generateDom = function() {\n      var container = angular.element('<toaster-wrapper />');\n      $container = $compile(container)(scope);\n      $document.find('body').append($container);\n    };\n    var pop = function (toastOptions) {\n      toastOptions = toastOptions || {};\n      angular.extend(toastOptions, {\n        timeout: 3000,\n        type: 'success'\n      }, angular.copy(toastOptions), {id: id++});\n      toastOptions.type = 'toaster-' + toastOptions.type;//transform type\n      if (!$container) {\n        generateDom();\n      }\n      append(toastOptions);\n    };\n    var append = function (toastOptions) {\n      scope.toasters.push(toastOptions);\n      $timeout(function () {\n        clear(toastOptions.id);\n      }, toastOptions.timeout);\n    };\n    var clear = function (id) {\n      for (var i = 0; i < scope.toasters.length; i++) {\n        if (scope.toasters[i].id === id) {\n          scope.toasters.splice(i, 1);\n          break;\n        }\n      }\n    };\n    var clearAll = function () {\n      $container.remove();\n    };\n    return {\n      pop: pop,\n      clear: clearAll\n    };\n  }])\n  .directive('toasterWrapper', function() {\n    return {\n      restrict: 'E',\n      replace: true,\n      template:\n      '<div class=\"toaster-container\">' +\n        '<div ng-repeat=\"toaster in toasters\" class=\"toaster\" ng-class=\"toaster.type\">' +\n          '<div class=\"toaster-title\">{{toaster.title}}</div>' +\n          '<div class=\"toaster-body\">{{toaster.body}}</div>' +\n        '</div>' +\n      '</div>'\n    };\n  });"}}